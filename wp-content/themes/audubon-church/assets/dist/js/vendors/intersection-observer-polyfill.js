!function(){"use strict";if("object"==typeof window)if("IntersectionObserver"in window&&"IntersectionObserverEntry"in window&&"intersectionRatio"in window.IntersectionObserverEntry.prototype)"isIntersecting"in window.IntersectionObserverEntry.prototype||Object.defineProperty(window.IntersectionObserverEntry.prototype,"isIntersecting",{get:function(){return 0<this.intersectionRatio}});else{var T=window.document,e=[];t.prototype.THROTTLE_TIMEOUT=100,t.prototype.POLL_INTERVAL=null,t.prototype.USE_MUTATION_OBSERVER=!0,t.prototype.observe=function(e){if(!this._observationTargets.some(function(t){return t.element==e})){if(!e||1!=e.nodeType)throw new Error("target must be an Element");this._registerInstance(),this._observationTargets.push({element:e,entry:null}),this._monitorIntersections(e.ownerDocument),this._checkForIntersections()}},t.prototype.unobserve=function(e){this._observationTargets=this._observationTargets.filter(function(t){return t.element!=e}),this._unmonitorIntersections(e.ownerDocument),0==this._observationTargets.length&&this._unregisterInstance()},t.prototype.disconnect=function(){this._observationTargets=[],this._unmonitorAllIntersections(),this._unregisterInstance()},t.prototype.takeRecords=function(){var t=this._queuedEntries.slice();return this._queuedEntries=[],t},t.prototype._initThresholds=function(t){var e=t||[0];return Array.isArray(e)||(e=[e]),e.sort().filter(function(t,e,n){if("number"!=typeof t||isNaN(t)||t<0||1<t)throw new Error("threshold must be a number between 0 and 1 inclusively");return t!==n[e-1]})},t.prototype._parseRootMargin=function(t){var e=(t||"0px").split(/\s+/).map(function(t){var e=/^(-?\d*\.?\d+)(px|%)$/.exec(t);if(!e)throw new Error("rootMargin must be specified in pixels or percent");return{value:parseFloat(e[1]),unit:e[2]}});return e[1]=e[1]||e[0],e[2]=e[2]||e[0],e[3]=e[3]||e[1],e},t.prototype._monitorIntersections=function(e){var t=e.defaultView;if(t&&-1==this._monitoringDocuments.indexOf(e)){var n=this._checkForIntersections,o=null,i=null;if(this.POLL_INTERVAL?o=t.setInterval(n,this.POLL_INTERVAL):(s(t,"resize",n,!0),s(e,"scroll",n,!0),this.USE_MUTATION_OBSERVER&&"MutationObserver"in t&&(i=new t.MutationObserver(n)).observe(e,{attributes:!0,childList:!0,characterData:!0,subtree:!0})),this._monitoringDocuments.push(e),this._monitoringUnsubscribes.push(function(){var t=e.defaultView;t&&(o&&t.clearInterval(o),h(t,"resize",n,!0)),h(e,"scroll",n,!0),i&&i.disconnect()}),e!=(this.root&&this.root.ownerDocument||T)){var r=c(e);r&&this._monitorIntersections(r.ownerDocument)}}},t.prototype._unmonitorIntersections=function(o){var t=this._monitoringDocuments.indexOf(o);if(-1!=t){var i=this.root&&this.root.ownerDocument||T;if(!this._observationTargets.some(function(t){var e=t.element.ownerDocument;if(e==o)return!0;for(;e&&e!=i;){var n=c(e);if((e=n&&n.ownerDocument)==o)return!0}return!1})){var e=this._monitoringUnsubscribes[t];if(this._monitoringDocuments.splice(t,1),this._monitoringUnsubscribes.splice(t,1),e(),o!=i){var n=c(o);n&&this._unmonitorIntersections(n.ownerDocument)}}}},t.prototype._unmonitorAllIntersections=function(){var t=this._monitoringUnsubscribes.slice(0);this._monitoringDocuments.length=0;for(var e=this._monitoringUnsubscribes.length=0;e<t.length;e++)t[e]()},t.prototype._checkForIntersections=function(){var h=this._rootIsInDom(),c=h?this._getRootRect():{top:0,bottom:0,left:0,right:0,width:0,height:0};this._observationTargets.forEach(function(t){var e=t.element,n=R(e),o=this._rootContainsTarget(e),i=t.entry,r=h&&o&&this._computeTargetAndRootIntersection(e,n,c),s=t.entry=new u({time:window.performance&&performance.now&&performance.now(),target:e,boundingClientRect:n,rootBounds:c,intersectionRect:r});i?h&&o?this._hasCrossedThreshold(i,s)&&this._queuedEntries.push(s):i&&i.isIntersecting&&this._queuedEntries.push(s):this._queuedEntries.push(s)},this),this._queuedEntries.length&&this._callback(this.takeRecords(),this)},t.prototype._computeTargetAndRootIntersection=function(t,e,n){if("none"!=window.getComputedStyle(t).display){for(var o,i,r,s,h,c,u,a,l,f,p,d,g=e,m=O(t),v=!1;!v&&m;){var _=null,b=1==m.nodeType?window.getComputedStyle(m):{};if("none"==b.display)return null;if(m==this.root||9==m.nodeType)if(v=!0,m==this.root||m==T)_=n;else{var w=O(m),y=w&&R(w),I=w&&this._computeTargetAndRootIntersection(w,y,n);y&&I?(m=w,l=y,void 0,p=(f=I).top-l.top,d=f.left-l.left,_={top:p,left:d,height:f.height,width:f.width,bottom:p+f.height,right:d+f.width}):g=m=null}else{var E=m.ownerDocument;m!=E.body&&m!=E.documentElement&&"visible"!=b.overflow&&(_=R(m))}if(_&&(o=_,i=g,void 0,r=Math.max(o.top,i.top),s=Math.min(o.bottom,i.bottom),h=Math.max(o.left,i.left),c=Math.min(o.right,i.right),a=s-r,g=0<=(u=c-h)&&0<=a&&{top:r,bottom:s,left:h,right:c,width:u,height:a}||null),!g)break;m=m&&O(m)}return g}},t.prototype._getRootRect=function(){var t;if(this.root)t=R(this.root);else{var e=T.documentElement,n=T.body;t={top:0,left:0,right:e.clientWidth||n.clientWidth,width:e.clientWidth||n.clientWidth,bottom:e.clientHeight||n.clientHeight,height:e.clientHeight||n.clientHeight}}return this._expandRectByRootMargin(t)},t.prototype._expandRectByRootMargin=function(n){var t=this._rootMarginValues.map(function(t,e){return"px"==t.unit?t.value:t.value*(e%2?n.width:n.height)/100}),e={top:n.top-t[0],right:n.right+t[1],bottom:n.bottom+t[2],left:n.left-t[3]};return e.width=e.right-e.left,e.height=e.bottom-e.top,e},t.prototype._hasCrossedThreshold=function(t,e){var n=t&&t.isIntersecting?t.intersectionRatio||0:-1,o=e.isIntersecting?e.intersectionRatio||0:-1;if(n!==o)for(var i=0;i<this.thresholds.length;i++){var r=this.thresholds[i];if(r==n||r==o||r<n!=r<o)return!0}},t.prototype._rootIsInDom=function(){return!this.root||n(T,this.root)},t.prototype._rootContainsTarget=function(t){return n(this.root||T,t)&&(!this.root||this.root.ownerDocument==t.ownerDocument)},t.prototype._registerInstance=function(){e.indexOf(this)<0&&e.push(this)},t.prototype._unregisterInstance=function(){var t=e.indexOf(this);-1!=t&&e.splice(t,1)},window.IntersectionObserver=t,window.IntersectionObserverEntry=u}function u(t){this.time=t.time,this.target=t.target,this.rootBounds=t.rootBounds,this.boundingClientRect=t.boundingClientRect,this.intersectionRect=t.intersectionRect||{top:0,bottom:0,left:0,right:0,width:0,height:0},this.isIntersecting=!!t.intersectionRect;var e=this.boundingClientRect,n=e.width*e.height,o=this.intersectionRect,i=o.width*o.height;this.intersectionRatio=n?Number((i/n).toFixed(4)):this.isIntersecting?1:0}function t(t,e){var n,o,i,r=e||{};if("function"!=typeof t)throw new Error("callback must be a function");if(r.root&&1!=r.root.nodeType)throw new Error("root must be an Element");this._checkForIntersections=(n=this._checkForIntersections.bind(this),o=this.THROTTLE_TIMEOUT,i=null,function(){i||(i=setTimeout(function(){n(),i=null},o))}),this._callback=t,this._observationTargets=[],this._queuedEntries=[],this._rootMarginValues=this._parseRootMargin(r.rootMargin),this.thresholds=this._initThresholds(r.threshold),this.root=r.root||null,this.rootMargin=this._rootMarginValues.map(function(t){return t.value+t.unit}).join(" "),this._monitoringDocuments=[],this._monitoringUnsubscribes=[]}function s(t,e,n,o){"function"==typeof t.addEventListener?t.addEventListener(e,n,o||!1):"function"==typeof t.attachEvent&&t.attachEvent("on"+e,n)}function h(t,e,n,o){"function"==typeof t.removeEventListener?t.removeEventListener(e,n,o||!1):"function"==typeof t.detatchEvent&&t.detatchEvent("on"+e,n)}function R(t){var e;try{e=t.getBoundingClientRect()}catch(t){}return e?(e.width&&e.height||(e={top:e.top,right:e.right,bottom:e.bottom,left:e.left,width:e.right-e.left,height:e.bottom-e.top}),e):{top:0,bottom:0,left:0,right:0,width:0,height:0}}function n(t,e){for(var n=e;n;){if(n==t)return!0;n=O(n)}return!1}function O(t){var e=t.parentNode;return 9==t.nodeType&&t!=T?c(t):e&&11==e.nodeType&&e.host?e.host:e&&e.assignedSlot?e.assignedSlot.parentNode:e}function c(t){try{return t.defaultView&&t.defaultView.frameElement||null}catch(t){return null}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlbmRvcnMvaW50ZXJzZWN0aW9uLW9ic2VydmVyLXBvbHlmaWxsLmpzIl0sIm5hbWVzIjpbIndpbmRvdyIsIkludGVyc2VjdGlvbk9ic2VydmVyRW50cnkiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsInRoaXMiLCJpbnRlcnNlY3Rpb25SYXRpbyIsImRvY3VtZW50IiwicmVnaXN0cnkiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIlRIUk9UVExFX1RJTUVPVVQiLCJQT0xMX0lOVEVSVkFMIiwiVVNFX01VVEFUSU9OX09CU0VSVkVSIiwib2JzZXJ2ZSIsInRhcmdldCIsIl9vYnNlcnZhdGlvblRhcmdldHMiLCJzb21lIiwiaXRlbSIsImVsZW1lbnQiLCJub2RlVHlwZSIsIkVycm9yIiwiX3JlZ2lzdGVySW5zdGFuY2UiLCJwdXNoIiwiZW50cnkiLCJfbW9uaXRvckludGVyc2VjdGlvbnMiLCJvd25lckRvY3VtZW50IiwiX2NoZWNrRm9ySW50ZXJzZWN0aW9ucyIsInVub2JzZXJ2ZSIsImZpbHRlciIsIl91bm1vbml0b3JJbnRlcnNlY3Rpb25zIiwibGVuZ3RoIiwiX3VucmVnaXN0ZXJJbnN0YW5jZSIsImRpc2Nvbm5lY3QiLCJfdW5tb25pdG9yQWxsSW50ZXJzZWN0aW9ucyIsInRha2VSZWNvcmRzIiwicmVjb3JkcyIsIl9xdWV1ZWRFbnRyaWVzIiwic2xpY2UiLCJfaW5pdFRocmVzaG9sZHMiLCJvcHRfdGhyZXNob2xkIiwidGhyZXNob2xkIiwiQXJyYXkiLCJpc0FycmF5Iiwic29ydCIsInQiLCJpIiwiYSIsImlzTmFOIiwiX3BhcnNlUm9vdE1hcmdpbiIsIm9wdF9yb290TWFyZ2luIiwibWFyZ2lucyIsInNwbGl0IiwibWFwIiwibWFyZ2luIiwicGFydHMiLCJleGVjIiwidmFsdWUiLCJwYXJzZUZsb2F0IiwidW5pdCIsImRvYyIsIndpbiIsImRlZmF1bHRWaWV3IiwiX21vbml0b3JpbmdEb2N1bWVudHMiLCJpbmRleE9mIiwiY2FsbGJhY2siLCJtb25pdG9yaW5nSW50ZXJ2YWwiLCJkb21PYnNlcnZlciIsInNldEludGVydmFsIiwiYWRkRXZlbnQiLCJNdXRhdGlvbk9ic2VydmVyIiwiYXR0cmlidXRlcyIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJzdWJ0cmVlIiwiX21vbml0b3JpbmdVbnN1YnNjcmliZXMiLCJjbGVhckludGVydmFsIiwicmVtb3ZlRXZlbnQiLCJyb290IiwiZnJhbWUiLCJnZXRGcmFtZUVsZW1lbnQiLCJpbmRleCIsInJvb3REb2MiLCJpdGVtRG9jIiwidW5zdWJzY3JpYmUiLCJzcGxpY2UiLCJ1bnN1YnNjcmliZXMiLCJyb290SXNJbkRvbSIsIl9yb290SXNJbkRvbSIsInJvb3RSZWN0IiwiX2dldFJvb3RSZWN0IiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0Iiwid2lkdGgiLCJoZWlnaHQiLCJmb3JFYWNoIiwidGFyZ2V0UmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJvb3RDb250YWluc1RhcmdldCIsIl9yb290Q29udGFpbnNUYXJnZXQiLCJvbGRFbnRyeSIsImludGVyc2VjdGlvblJlY3QiLCJfY29tcHV0ZVRhcmdldEFuZFJvb3RJbnRlcnNlY3Rpb24iLCJuZXdFbnRyeSIsInRpbWUiLCJwZXJmb3JtYW5jZSIsIm5vdyIsImJvdW5kaW5nQ2xpZW50UmVjdCIsInJvb3RCb3VuZHMiLCJfaGFzQ3Jvc3NlZFRocmVzaG9sZCIsImlzSW50ZXJzZWN0aW5nIiwiX2NhbGxiYWNrIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImRpc3BsYXkiLCJyZWN0MSIsInJlY3QyIiwicGFyZW50Qm91bmRpbmdSZWN0IiwicGFyZW50SW50ZXJzZWN0aW9uUmVjdCIsInBhcmVudCIsImdldFBhcmVudE5vZGUiLCJhdFJvb3QiLCJwYXJlbnRSZWN0IiwicGFyZW50Q29tcHV0ZWRTdHlsZSIsImZyYW1lUmVjdCIsImZyYW1lSW50ZXJzZWN0IiwiYm9keSIsImRvY3VtZW50RWxlbWVudCIsIm92ZXJmbG93IiwiTWF0aCIsIm1heCIsIm1pbiIsImh0bWwiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIl9leHBhbmRSZWN0QnlSb290TWFyZ2luIiwicmVjdCIsIl9yb290TWFyZ2luVmFsdWVzIiwibmV3UmVjdCIsIm9sZFJhdGlvIiwibmV3UmF0aW8iLCJ0aHJlc2hvbGRzIiwiY29udGFpbnNEZWVwIiwidGFyZ2V0QXJlYSIsImludGVyc2VjdGlvbkFyZWEiLCJOdW1iZXIiLCJ0b0ZpeGVkIiwib3B0X29wdGlvbnMiLCJmbiIsInRpbWVvdXQiLCJ0aW1lciIsIm9wdGlvbnMiLCJiaW5kIiwic2V0VGltZW91dCIsInJvb3RNYXJnaW4iLCJqb2luIiwibm9kZSIsImV2ZW50Iiwib3B0X3VzZUNhcHR1cmUiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YXRjaEV2ZW50IiwiZWwiLCJlcnIiLCJjaGlsZCIsInBhcmVudE5vZGUiLCJob3N0IiwiYXNzaWduZWRTbG90IiwiZnJhbWVFbGVtZW50IiwiZSJdLCJtYXBwaW5ncyI6IkNBUUMsV0FDRyxhQUdBLEdBQXNCLGlCQUFYQSxPQU1YLEdBQUkseUJBQTBCQSxRQUMxQiw4QkFBK0JBLFFBQy9CLHNCQUF1QkEsT0FBT0MsMEJBQTBCQyxVQUlwRCxtQkFBb0JGLE9BQU9DLDBCQUEwQkMsV0FDekRDLE9BQU9DLGVBQWVKLE9BQU9DLDBCQUEwQkMsVUFDckQsaUJBQWtCLENBQ2xCRyxJQUFLLFdBQ0gsT0FBZ0MsRUFBekJDLEtBQUtDLHlCQVZwQixDQXFCQSxJQUFJQyxFQUFXUixPQUFPUSxTQVNsQkMsRUFBVyxHQW9GZkMsRUFBcUJSLFVBQVVTLGlCQUFtQixJQVFsREQsRUFBcUJSLFVBQVVVLGNBQWdCLEtBTS9DRixFQUFxQlIsVUFBVVcsdUJBQXdCLEVBUXZESCxFQUFxQlIsVUFBVVksUUFBVSxTQUFTQyxHQUtoRCxJQUo4QlQsS0FBS1Usb0JBQW9CQyxLQUFLLFNBQVNDLEdBQ25FLE9B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TyxFQUUzQnFDLEVBQU9wQyxFQUFjb0MsR0FFdkIsT0FBTyxFQVVULFNBQVNwQyxFQUFjb0MsR0FDckIsSUFBSXJDLEVBQVNxQyxFQUFLVSxXQUVsQixPQUFvQyxHQUFoQ1YsRUFBS3pJLFVBQWdDeUksR0FBUXJKLEVBRXhDd0UsRUFBZ0I2RSxHQUdyQnJDLEdBQTZCLElBQW5CQSxFQUFPcEcsVUFBa0JvRyxFQUFPZ0QsS0FFckNoRCxFQUFPZ0QsS0FHWmhELEdBQVVBLEVBQU9pRCxhQUVaakQsRUFBT2lELGFBQWFGLFdBR3RCL0MsRUFTVCxTQUFTeEMsRUFBZ0JwQixHQUN2QixJQUNFLE9BQU9BLEVBQUlFLGFBQWVGLEVBQUlFLFlBQVk0RyxjQUFnQixLQUMxRCxNQUFPQyxHQUVQLE9BQU8sT0FqMkJmIiwiZmlsZSI6InZlbmRvcnMvaW50ZXJzZWN0aW9uLW9ic2VydmVyLXBvbHlmaWxsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBXM0MgU09GVFdBUkUgQU5EIERPQ1VNRU5UIE5PVElDRSBBTkQgTElDRU5TRS5cbiAqXG4gKiAgaHR0cHM6Ly93d3cudzMub3JnL0NvbnNvcnRpdW0vTGVnYWwvMjAxNS9jb3B5cmlnaHQtc29mdHdhcmUtYW5kLWRvY3VtZW50XG4gKlxuICovXG4oZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIFxuICAgIC8vIEV4aXQgZWFybHkgaWYgd2UncmUgbm90IHJ1bm5pbmcgaW4gYSBicm93c2VyLlxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICAvLyBFeGl0IGVhcmx5IGlmIGFsbCBJbnRlcnNlY3Rpb25PYnNlcnZlciBhbmQgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeVxuICAgIC8vIGZlYXR1cmVzIGFyZSBuYXRpdmVseSBzdXBwb3J0ZWQuXG4gICAgaWYgKCdJbnRlcnNlY3Rpb25PYnNlcnZlcicgaW4gd2luZG93ICYmXG4gICAgICAgICdJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5JyBpbiB3aW5kb3cgJiZcbiAgICAgICAgJ2ludGVyc2VjdGlvblJhdGlvJyBpbiB3aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeS5wcm90b3R5cGUpIHtcbiAgICBcbiAgICAgIC8vIE1pbmltYWwgcG9seWZpbGwgZm9yIEVkZ2UgMTUncyBsYWNrIG9mIGBpc0ludGVyc2VjdGluZ2BcbiAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3czYy9JbnRlcnNlY3Rpb25PYnNlcnZlci9pc3N1ZXMvMjExXG4gICAgICBpZiAoISgnaXNJbnRlcnNlY3RpbmcnIGluIHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5LnByb3RvdHlwZSkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5LnByb3RvdHlwZSxcbiAgICAgICAgICAnaXNJbnRlcnNlY3RpbmcnLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3Rpb25SYXRpbyA+IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogQSBsb2NhbCByZWZlcmVuY2UgdG8gdGhlIGRvY3VtZW50LlxuICAgICAqL1xuICAgIHZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcbiAgICBcbiAgICBcbiAgICAvKipcbiAgICAgKiBBbiBJbnRlcnNlY3Rpb25PYnNlcnZlciByZWdpc3RyeS4gVGhpcyByZWdpc3RyeSBleGlzdHMgdG8gaG9sZCBhIHN0cm9uZ1xuICAgICAqIHJlZmVyZW5jZSB0byBJbnRlcnNlY3Rpb25PYnNlcnZlciBpbnN0YW5jZXMgY3VycmVudGx5IG9ic2VydmluZyBhIHRhcmdldFxuICAgICAqIGVsZW1lbnQuIFdpdGhvdXQgdGhpcyByZWdpc3RyeSwgaW5zdGFuY2VzIHdpdGhvdXQgYW5vdGhlciByZWZlcmVuY2UgbWF5IGJlXG4gICAgICogZ2FyYmFnZSBjb2xsZWN0ZWQuXG4gICAgICovXG4gICAgdmFyIHJlZ2lzdHJ5ID0gW107XG4gICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgZ2xvYmFsIEludGVyc2VjdGlvbk9ic2VydmVyRW50cnkgY29uc3RydWN0b3IuXG4gICAgICogaHR0cHM6Ly93M2MuZ2l0aHViLmlvL0ludGVyc2VjdGlvbk9ic2VydmVyLyNpbnRlcnNlY3Rpb24tb2JzZXJ2ZXItZW50cnlcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZW50cnkgQSBkaWN0aW9uYXJ5IG9mIGluc3RhbmNlIHByb3BlcnRpZXMuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgZnVuY3Rpb24gSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeShlbnRyeSkge1xuICAgICAgdGhpcy50aW1lID0gZW50cnkudGltZTtcbiAgICAgIHRoaXMudGFyZ2V0ID0gZW50cnkudGFyZ2V0O1xuICAgICAgdGhpcy5yb290Qm91bmRzID0gZW50cnkucm9vdEJvdW5kcztcbiAgICAgIHRoaXMuYm91bmRpbmdDbGllbnRSZWN0ID0gZW50cnkuYm91bmRpbmdDbGllbnRSZWN0O1xuICAgICAgdGhpcy5pbnRlcnNlY3Rpb25SZWN0ID0gZW50cnkuaW50ZXJzZWN0aW9uUmVjdCB8fCBnZXRFbXB0eVJlY3QoKTtcbiAgICAgIHRoaXMuaXNJbnRlcnNlY3RpbmcgPSAhIWVudHJ5LmludGVyc2VjdGlvblJlY3Q7XG4gICAgXG4gICAgICAvLyBDYWxjdWxhdGVzIHRoZSBpbnRlcnNlY3Rpb24gcmF0aW8uXG4gICAgICB2YXIgdGFyZ2V0UmVjdCA9IHRoaXMuYm91bmRpbmdDbGllbnRSZWN0O1xuICAgICAgdmFyIHRhcmdldEFyZWEgPSB0YXJnZXRSZWN0LndpZHRoICogdGFyZ2V0UmVjdC5oZWlnaHQ7XG4gICAgICB2YXIgaW50ZXJzZWN0aW9uUmVjdCA9IHRoaXMuaW50ZXJzZWN0aW9uUmVjdDtcbiAgICAgIHZhciBpbnRlcnNlY3Rpb25BcmVhID0gaW50ZXJzZWN0aW9uUmVjdC53aWR0aCAqIGludGVyc2VjdGlvblJlY3QuaGVpZ2h0O1xuICAgIFxuICAgICAgLy8gU2V0cyBpbnRlcnNlY3Rpb24gcmF0aW8uXG4gICAgICBpZiAodGFyZ2V0QXJlYSkge1xuICAgICAgICAvLyBSb3VuZCB0aGUgaW50ZXJzZWN0aW9uIHJhdGlvIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IG1hdGggaXNzdWVzOlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdzNjL0ludGVyc2VjdGlvbk9ic2VydmVyL2lzc3Vlcy8zMjRcbiAgICAgICAgdGhpcy5pbnRlcnNlY3Rpb25SYXRpbyA9IE51bWJlcigoaW50ZXJzZWN0aW9uQXJlYSAvIHRhcmdldEFyZWEpLnRvRml4ZWQoNCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgYXJlYSBpcyB6ZXJvIGFuZCBpcyBpbnRlcnNlY3RpbmcsIHNldHMgdG8gMSwgb3RoZXJ3aXNlIHRvIDBcbiAgICAgICAgdGhpcy5pbnRlcnNlY3Rpb25SYXRpbyA9IHRoaXMuaXNJbnRlcnNlY3RpbmcgPyAxIDogMDtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgZ2xvYmFsIEludGVyc2VjdGlvbk9ic2VydmVyIGNvbnN0cnVjdG9yLlxuICAgICAqIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9JbnRlcnNlY3Rpb25PYnNlcnZlci8jaW50ZXJzZWN0aW9uLW9ic2VydmVyLWludGVyZmFjZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBiZSBpbnZva2VkIGFmdGVyIGludGVyc2VjdGlvblxuICAgICAqICAgICBjaGFuZ2VzIGhhdmUgcXVldWVkLiBUaGUgZnVuY3Rpb24gaXMgbm90IGludm9rZWQgaWYgdGhlIHF1ZXVlIGhhc1xuICAgICAqICAgICBiZWVuIGVtcHRpZWQgYnkgY2FsbGluZyB0aGUgYHRha2VSZWNvcmRzYCBtZXRob2QuXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfb3B0aW9ucyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgZnVuY3Rpb24gSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoY2FsbGJhY2ssIG9wdF9vcHRpb25zKSB7XG4gICAgXG4gICAgICB2YXIgb3B0aW9ucyA9IG9wdF9vcHRpb25zIHx8IHt9O1xuICAgIFxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgXG4gICAgICBpZiAob3B0aW9ucy5yb290ICYmIG9wdGlvbnMucm9vdC5ub2RlVHlwZSAhPSAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncm9vdCBtdXN0IGJlIGFuIEVsZW1lbnQnKTtcbiAgICAgIH1cbiAgICBcbiAgICAgIC8vIEJpbmRzIGFuZCB0aHJvdHRsZXMgYHRoaXMuX2NoZWNrRm9ySW50ZXJzZWN0aW9uc2AuXG4gICAgICB0aGlzLl9jaGVja0ZvckludGVyc2VjdGlvbnMgPSB0aHJvdHRsZShcbiAgICAgICAgICB0aGlzLl9jaGVja0ZvckludGVyc2VjdGlvbnMuYmluZCh0aGlzKSwgdGhpcy5USFJPVFRMRV9USU1FT1VUKTtcbiAgICBcbiAgICAgIC8vIFByaXZhdGUgcHJvcGVydGllcy5cbiAgICAgIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICB0aGlzLl9vYnNlcnZhdGlvblRhcmdldHMgPSBbXTtcbiAgICAgIHRoaXMuX3F1ZXVlZEVudHJpZXMgPSBbXTtcbiAgICAgIHRoaXMuX3Jvb3RNYXJnaW5WYWx1ZXMgPSB0aGlzLl9wYXJzZVJvb3RNYXJnaW4ob3B0aW9ucy5yb290TWFyZ2luKTtcbiAgICBcbiAgICAgIC8vIFB1YmxpYyBwcm9wZXJ0aWVzLlxuICAgICAgdGhpcy50aHJlc2hvbGRzID0gdGhpcy5faW5pdFRocmVzaG9sZHMob3B0aW9ucy50aHJlc2hvbGQpO1xuICAgICAgdGhpcy5yb290ID0gb3B0aW9ucy5yb290IHx8IG51bGw7XG4gICAgICB0aGlzLnJvb3RNYXJnaW4gPSB0aGlzLl9yb290TWFyZ2luVmFsdWVzLm1hcChmdW5jdGlvbihtYXJnaW4pIHtcbiAgICAgICAgcmV0dXJuIG1hcmdpbi52YWx1ZSArIG1hcmdpbi51bml0O1xuICAgICAgfSkuam9pbignICcpO1xuICAgIFxuICAgICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IUFycmF5PCFEb2N1bWVudD59ICovXG4gICAgICB0aGlzLl9tb25pdG9yaW5nRG9jdW1lbnRzID0gW107XG4gICAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshQXJyYXk8ZnVuY3Rpb24oKT59ICovXG4gICAgICB0aGlzLl9tb25pdG9yaW5nVW5zdWJzY3JpYmVzID0gW107XG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8qKlxuICAgICAqIFRoZSBtaW5pbXVtIGludGVydmFsIHdpdGhpbiB3aGljaCB0aGUgZG9jdW1lbnQgd2lsbCBiZSBjaGVja2VkIGZvclxuICAgICAqIGludGVyc2VjdGlvbiBjaGFuZ2VzLlxuICAgICAqL1xuICAgIEludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5USFJPVFRMRV9USU1FT1VUID0gMTAwO1xuICAgIFxuICAgIFxuICAgIC8qKlxuICAgICAqIFRoZSBmcmVxdWVuY3kgaW4gd2hpY2ggdGhlIHBvbHlmaWxsIHBvbGxzIGZvciBpbnRlcnNlY3Rpb24gY2hhbmdlcy5cbiAgICAgKiB0aGlzIGNhbiBiZSB1cGRhdGVkIG9uIGEgcGVyIGluc3RhbmNlIGJhc2lzIGFuZCBtdXN0IGJlIHNldCBwcmlvciB0b1xuICAgICAqIGNhbGxpbmcgYG9ic2VydmVgIG9uIHRoZSBmaXJzdCB0YXJnZXQuXG4gICAgICovXG4gICAgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLlBPTExfSU5URVJWQUwgPSBudWxsO1xuICAgIFxuICAgIC8qKlxuICAgICAqIFVzZSBhIG11dGF0aW9uIG9ic2VydmVyIG9uIHRoZSByb290IGVsZW1lbnRcbiAgICAgKiB0byBkZXRlY3QgaW50ZXJzZWN0aW9uIGNoYW5nZXMuXG4gICAgICovXG4gICAgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLlVTRV9NVVRBVElPTl9PQlNFUlZFUiA9IHRydWU7XG4gICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogU3RhcnRzIG9ic2VydmluZyBhIHRhcmdldCBlbGVtZW50IGZvciBpbnRlcnNlY3Rpb24gY2hhbmdlcyBiYXNlZCBvblxuICAgICAqIHRoZSB0aHJlc2hvbGRzIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCBUaGUgRE9NIGVsZW1lbnQgdG8gb2JzZXJ2ZS5cbiAgICAgKi9cbiAgICBJbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgdmFyIGlzVGFyZ2V0QWxyZWFkeU9ic2VydmVkID0gdGhpcy5fb2JzZXJ2YXRpb25UYXJnZXRzLnNvbWUoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbS5lbGVtZW50ID09IHRhcmdldDtcbiAgICAgIH0pO1xuICAgIFxuICAgICAgaWYgKGlzVGFyZ2V0QWxyZWFkeU9ic2VydmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICBcbiAgICAgIGlmICghKHRhcmdldCAmJiB0YXJnZXQubm9kZVR5cGUgPT0gMSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0YXJnZXQgbXVzdCBiZSBhbiBFbGVtZW50Jyk7XG4gICAgICB9XG4gICAgXG4gICAgICB0aGlzLl9yZWdpc3Rlckluc3RhbmNlKCk7XG4gICAgICB0aGlzLl9vYnNlcnZhdGlvblRhcmdldHMucHVzaCh7ZWxlbWVudDogdGFyZ2V0LCBlbnRyeTogbnVsbH0pO1xuICAgICAgdGhpcy5fbW9uaXRvckludGVyc2VjdGlvbnModGFyZ2V0Lm93bmVyRG9jdW1lbnQpO1xuICAgICAgdGhpcy5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zKCk7XG4gICAgfTtcbiAgICBcbiAgICBcbiAgICAvKipcbiAgICAgKiBTdG9wcyBvYnNlcnZpbmcgYSB0YXJnZXQgZWxlbWVudCBmb3IgaW50ZXJzZWN0aW9uIGNoYW5nZXMuXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgVGhlIERPTSBlbGVtZW50IHRvIG9ic2VydmUuXG4gICAgICovXG4gICAgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLnVub2JzZXJ2ZSA9IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgdGhpcy5fb2JzZXJ2YXRpb25UYXJnZXRzID1cbiAgICAgICAgICB0aGlzLl9vYnNlcnZhdGlvblRhcmdldHMuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtLmVsZW1lbnQgIT0gdGFyZ2V0O1xuICAgICAgICAgIH0pO1xuICAgICAgdGhpcy5fdW5tb25pdG9ySW50ZXJzZWN0aW9ucyh0YXJnZXQub3duZXJEb2N1bWVudCk7XG4gICAgICBpZiAodGhpcy5fb2JzZXJ2YXRpb25UYXJnZXRzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHRoaXMuX3VucmVnaXN0ZXJJbnN0YW5jZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogU3RvcHMgb2JzZXJ2aW5nIGFsbCB0YXJnZXQgZWxlbWVudHMgZm9yIGludGVyc2VjdGlvbiBjaGFuZ2VzLlxuICAgICAqL1xuICAgIEludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9vYnNlcnZhdGlvblRhcmdldHMgPSBbXTtcbiAgICAgIHRoaXMuX3VubW9uaXRvckFsbEludGVyc2VjdGlvbnMoKTtcbiAgICAgIHRoaXMuX3VucmVnaXN0ZXJJbnN0YW5jZSgpO1xuICAgIH07XG4gICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbnkgcXVldWUgZW50cmllcyB0aGF0IGhhdmUgbm90IHlldCBiZWVuIHJlcG9ydGVkIHRvIHRoZVxuICAgICAqIGNhbGxiYWNrIGFuZCBjbGVhcnMgdGhlIHF1ZXVlLiBUaGlzIGNhbiBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlXG4gICAgICogY2FsbGJhY2sgdG8gb2J0YWluIHRoZSBhYnNvbHV0ZSBtb3N0IHVwLXRvLWRhdGUgaW50ZXJzZWN0aW9uIGluZm9ybWF0aW9uLlxuICAgICAqIEByZXR1cm4ge0FycmF5fSBUaGUgY3VycmVudGx5IHF1ZXVlZCBlbnRyaWVzLlxuICAgICAqL1xuICAgIEludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS50YWtlUmVjb3JkcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlY29yZHMgPSB0aGlzLl9xdWV1ZWRFbnRyaWVzLnNsaWNlKCk7XG4gICAgICB0aGlzLl9xdWV1ZWRFbnRyaWVzID0gW107XG4gICAgICByZXR1cm4gcmVjb3JkcztcbiAgICB9O1xuICAgIFxuICAgIFxuICAgIC8qKlxuICAgICAqIEFjY2VwdHMgdGhlIHRocmVzaG9sZCB2YWx1ZSBmcm9tIHRoZSB1c2VyIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGFuZFxuICAgICAqIHJldHVybnMgYSBzb3J0ZWQgYXJyYXkgb2YgdW5pcXVlIHRocmVzaG9sZCB2YWx1ZXMuIElmIGEgdmFsdWUgaXMgbm90XG4gICAgICogYmV0d2VlbiAwIGFuZCAxIGFuZCBlcnJvciBpcyB0aHJvd24uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fG51bWJlcj19IG9wdF90aHJlc2hvbGQgQW4gb3B0aW9uYWwgdGhyZXNob2xkIHZhbHVlIG9yXG4gICAgICogICAgIGEgbGlzdCBvZiB0aHJlc2hvbGQgdmFsdWVzLCBkZWZhdWx0aW5nIHRvIFswXS5cbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gQSBzb3J0ZWQgbGlzdCBvZiB1bmlxdWUgYW5kIHZhbGlkIHRocmVzaG9sZCB2YWx1ZXMuXG4gICAgICovXG4gICAgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl9pbml0VGhyZXNob2xkcyA9IGZ1bmN0aW9uKG9wdF90aHJlc2hvbGQpIHtcbiAgICAgIHZhciB0aHJlc2hvbGQgPSBvcHRfdGhyZXNob2xkIHx8IFswXTtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0aHJlc2hvbGQpKSB0aHJlc2hvbGQgPSBbdGhyZXNob2xkXTtcbiAgICBcbiAgICAgIHJldHVybiB0aHJlc2hvbGQuc29ydCgpLmZpbHRlcihmdW5jdGlvbih0LCBpLCBhKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdCAhPSAnbnVtYmVyJyB8fCBpc05hTih0KSB8fCB0IDwgMCB8fCB0ID4gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndGhyZXNob2xkIG11c3QgYmUgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxIGluY2x1c2l2ZWx5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQgIT09IGFbaSAtIDFdO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBcbiAgICBcbiAgICAvKipcbiAgICAgKiBBY2NlcHRzIHRoZSByb290TWFyZ2luIHZhbHVlIGZyb20gdGhlIHVzZXIgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgZm91ciBtYXJnaW4gdmFsdWVzIGFzIGFuIG9iamVjdCBjb250YWluaW5nXG4gICAgICogdGhlIHZhbHVlIGFuZCB1bml0IHByb3BlcnRpZXMuIElmIGFueSBvZiB0aGUgdmFsdWVzIGFyZSBub3QgcHJvcGVybHlcbiAgICAgKiBmb3JtYXR0ZWQgb3IgdXNlIGEgdW5pdCBvdGhlciB0aGFuIHB4IG9yICUsIGFuZCBlcnJvciBpcyB0aHJvd24uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9yb290TWFyZ2luIEFuIG9wdGlvbmFsIHJvb3RNYXJnaW4gdmFsdWUsXG4gICAgICogICAgIGRlZmF1bHRpbmcgdG8gJzBweCcuXG4gICAgICogQHJldHVybiB7QXJyYXk8T2JqZWN0Pn0gQW4gYXJyYXkgb2YgbWFyZ2luIG9iamVjdHMgd2l0aCB0aGUga2V5c1xuICAgICAqICAgICB2YWx1ZSBhbmQgdW5pdC5cbiAgICAgKi9cbiAgICBJbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX3BhcnNlUm9vdE1hcmdpbiA9IGZ1bmN0aW9uKG9wdF9yb290TWFyZ2luKSB7XG4gICAgICB2YXIgbWFyZ2luU3RyaW5nID0gb3B0X3Jvb3RNYXJnaW4gfHwgJzBweCc7XG4gICAgICB2YXIgbWFyZ2lucyA9IG1hcmdpblN0cmluZy5zcGxpdCgvXFxzKy8pLm1hcChmdW5jdGlvbihtYXJnaW4pIHtcbiAgICAgICAgdmFyIHBhcnRzID0gL14oLT9cXGQqXFwuP1xcZCspKHB4fCUpJC8uZXhlYyhtYXJnaW4pO1xuICAgICAgICBpZiAoIXBhcnRzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyb290TWFyZ2luIG11c3QgYmUgc3BlY2lmaWVkIGluIHBpeGVscyBvciBwZXJjZW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHt2YWx1ZTogcGFyc2VGbG9hdChwYXJ0c1sxXSksIHVuaXQ6IHBhcnRzWzJdfTtcbiAgICAgIH0pO1xuICAgIFxuICAgICAgLy8gSGFuZGxlcyBzaG9ydGhhbmQuXG4gICAgICBtYXJnaW5zWzFdID0gbWFyZ2luc1sxXSB8fCBtYXJnaW5zWzBdO1xuICAgICAgbWFyZ2luc1syXSA9IG1hcmdpbnNbMl0gfHwgbWFyZ2luc1swXTtcbiAgICAgIG1hcmdpbnNbM10gPSBtYXJnaW5zWzNdIHx8IG1hcmdpbnNbMV07XG4gICAgXG4gICAgICByZXR1cm4gbWFyZ2lucztcbiAgICB9O1xuICAgIFxuICAgIFxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBwb2xsaW5nIGZvciBpbnRlcnNlY3Rpb24gY2hhbmdlcyBpZiB0aGUgcG9sbGluZyBpcyBub3QgYWxyZWFkeVxuICAgICAqIGhhcHBlbmluZywgYW5kIGlmIHRoZSBwYWdlJ3MgdmlzaWJpbGl0eSBzdGF0ZSBpcyB2aXNpYmxlLlxuICAgICAqIEBwYXJhbSB7IURvY3VtZW50fSBkb2NcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fbW9uaXRvckludGVyc2VjdGlvbnMgPSBmdW5jdGlvbihkb2MpIHtcbiAgICAgIHZhciB3aW4gPSBkb2MuZGVmYXVsdFZpZXc7XG4gICAgICBpZiAoIXdpbikge1xuICAgICAgICAvLyBBbHJlYWR5IGRlc3Ryb3llZC5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX21vbml0b3JpbmdEb2N1bWVudHMuaW5kZXhPZihkb2MpICE9IC0xKSB7XG4gICAgICAgIC8vIEFscmVhZHkgbW9uaXRvcmluZy5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIFxuICAgICAgLy8gUHJpdmF0ZSBzdGF0ZSBmb3IgbW9uaXRvcmluZy5cbiAgICAgIHZhciBjYWxsYmFjayA9IHRoaXMuX2NoZWNrRm9ySW50ZXJzZWN0aW9ucztcbiAgICAgIHZhciBtb25pdG9yaW5nSW50ZXJ2YWwgPSBudWxsO1xuICAgICAgdmFyIGRvbU9ic2VydmVyID0gbnVsbDtcbiAgICBcbiAgICAgIC8vIElmIGEgcG9sbCBpbnRlcnZhbCBpcyBzZXQsIHVzZSBwb2xsaW5nIGluc3RlYWQgb2YgbGlzdGVuaW5nIHRvXG4gICAgICAvLyByZXNpemUgYW5kIHNjcm9sbCBldmVudHMgb3IgRE9NIG11dGF0aW9ucy5cbiAgICAgIGlmICh0aGlzLlBPTExfSU5URVJWQUwpIHtcbiAgICAgICAgbW9uaXRvcmluZ0ludGVydmFsID0gd2luLnNldEludGVydmFsKGNhbGxiYWNrLCB0aGlzLlBPTExfSU5URVJWQUwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkRXZlbnQod2luLCAncmVzaXplJywgY2FsbGJhY2ssIHRydWUpO1xuICAgICAgICBhZGRFdmVudChkb2MsICdzY3JvbGwnLCBjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICAgIGlmICh0aGlzLlVTRV9NVVRBVElPTl9PQlNFUlZFUiAmJiAnTXV0YXRpb25PYnNlcnZlcicgaW4gd2luKSB7XG4gICAgICAgICAgZG9tT2JzZXJ2ZXIgPSBuZXcgd2luLk11dGF0aW9uT2JzZXJ2ZXIoY2FsbGJhY2spO1xuICAgICAgICAgIGRvbU9ic2VydmVyLm9ic2VydmUoZG9jLCB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcbiAgICAgICAgICAgIHN1YnRyZWU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIFxuICAgICAgdGhpcy5fbW9uaXRvcmluZ0RvY3VtZW50cy5wdXNoKGRvYyk7XG4gICAgICB0aGlzLl9tb25pdG9yaW5nVW5zdWJzY3JpYmVzLnB1c2goZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIEdldCB0aGUgd2luZG93IG9iamVjdCBhZ2Fpbi4gV2hlbiBhIGZyaWVuZGx5IGlmcmFtZSBpcyBkZXN0cm95ZWQsIGl0XG4gICAgICAgIC8vIHdpbGwgYmUgbnVsbC5cbiAgICAgICAgdmFyIHdpbiA9IGRvYy5kZWZhdWx0VmlldztcbiAgICBcbiAgICAgICAgaWYgKHdpbikge1xuICAgICAgICAgIGlmIChtb25pdG9yaW5nSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHdpbi5jbGVhckludGVydmFsKG1vbml0b3JpbmdJbnRlcnZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlbW92ZUV2ZW50KHdpbiwgJ3Jlc2l6ZScsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZW1vdmVFdmVudChkb2MsICdzY3JvbGwnLCBjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICAgIGlmIChkb21PYnNlcnZlcikge1xuICAgICAgICAgIGRvbU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgXG4gICAgICAvLyBBbHNvIG1vbml0b3IgdGhlIHBhcmVudC5cbiAgICAgIGlmIChkb2MgIT0gKHRoaXMucm9vdCAmJiB0aGlzLnJvb3Qub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCkpIHtcbiAgICAgICAgdmFyIGZyYW1lID0gZ2V0RnJhbWVFbGVtZW50KGRvYyk7XG4gICAgICAgIGlmIChmcmFtZSkge1xuICAgICAgICAgIHRoaXMuX21vbml0b3JJbnRlcnNlY3Rpb25zKGZyYW1lLm93bmVyRG9jdW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBcbiAgICBcbiAgICAvKipcbiAgICAgKiBTdG9wcyBwb2xsaW5nIGZvciBpbnRlcnNlY3Rpb24gY2hhbmdlcy5cbiAgICAgKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBJbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX3VubW9uaXRvckludGVyc2VjdGlvbnMgPSBmdW5jdGlvbihkb2MpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMuX21vbml0b3JpbmdEb2N1bWVudHMuaW5kZXhPZihkb2MpO1xuICAgICAgaWYgKGluZGV4ID09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICBcbiAgICAgIHZhciByb290RG9jID0gKHRoaXMucm9vdCAmJiB0aGlzLnJvb3Qub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCk7XG4gICAgXG4gICAgICAvLyBDaGVjayBpZiBhbnkgZGVwZW5kZW50IHRhcmdldHMgYXJlIHN0aWxsIHJlbWFpbmluZy5cbiAgICAgIHZhciBoYXNEZXBlbmRlbnRUYXJnZXRzID1cbiAgICAgICAgICB0aGlzLl9vYnNlcnZhdGlvblRhcmdldHMuc29tZShmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICB2YXIgaXRlbURvYyA9IGl0ZW0uZWxlbWVudC5vd25lckRvY3VtZW50O1xuICAgICAgICAgICAgLy8gVGFyZ2V0IGlzIGluIHRoaXMgY29udGV4dC5cbiAgICAgICAgICAgIGlmIChpdGVtRG9jID09IGRvYykge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRhcmdldCBpcyBuZXN0ZWQgaW4gdGhpcyBjb250ZXh0LlxuICAgICAgICAgICAgd2hpbGUgKGl0ZW1Eb2MgJiYgaXRlbURvYyAhPSByb290RG9jKSB7XG4gICAgICAgICAgICAgIHZhciBmcmFtZSA9IGdldEZyYW1lRWxlbWVudChpdGVtRG9jKTtcbiAgICAgICAgICAgICAgaXRlbURvYyA9IGZyYW1lICYmIGZyYW1lLm93bmVyRG9jdW1lbnQ7XG4gICAgICAgICAgICAgIGlmIChpdGVtRG9jID09IGRvYykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSk7XG4gICAgICBpZiAoaGFzRGVwZW5kZW50VGFyZ2V0cykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgXG4gICAgICAvLyBVbnN1YnNjcmliZS5cbiAgICAgIHZhciB1bnN1YnNjcmliZSA9IHRoaXMuX21vbml0b3JpbmdVbnN1YnNjcmliZXNbaW5kZXhdO1xuICAgICAgdGhpcy5fbW9uaXRvcmluZ0RvY3VtZW50cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgdGhpcy5fbW9uaXRvcmluZ1Vuc3Vic2NyaWJlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICBcbiAgICAgIC8vIEFsc28gdW5tb25pdG9yIHRoZSBwYXJlbnQuXG4gICAgICBpZiAoZG9jICE9IHJvb3REb2MpIHtcbiAgICAgICAgdmFyIGZyYW1lID0gZ2V0RnJhbWVFbGVtZW50KGRvYyk7XG4gICAgICAgIGlmIChmcmFtZSkge1xuICAgICAgICAgIHRoaXMuX3VubW9uaXRvckludGVyc2VjdGlvbnMoZnJhbWUub3duZXJEb2N1bWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIFxuICAgIC8qKlxuICAgICAqIFN0b3BzIHBvbGxpbmcgZm9yIGludGVyc2VjdGlvbiBjaGFuZ2VzLlxuICAgICAqIEBwYXJhbSB7IURvY3VtZW50fSBkb2NcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fdW5tb25pdG9yQWxsSW50ZXJzZWN0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHVuc3Vic2NyaWJlcyA9IHRoaXMuX21vbml0b3JpbmdVbnN1YnNjcmliZXMuc2xpY2UoMCk7XG4gICAgICB0aGlzLl9tb25pdG9yaW5nRG9jdW1lbnRzLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLl9tb25pdG9yaW5nVW5zdWJzY3JpYmVzLmxlbmd0aCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVuc3Vic2NyaWJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB1bnN1YnNjcmliZXNbaV0oKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIFxuICAgIC8qKlxuICAgICAqIFNjYW5zIGVhY2ggb2JzZXJ2YXRpb24gdGFyZ2V0IGZvciBpbnRlcnNlY3Rpb24gY2hhbmdlcyBhbmQgYWRkcyB0aGVtXG4gICAgICogdG8gdGhlIGludGVybmFsIGVudHJpZXMgcXVldWUuIElmIG5ldyBlbnRyaWVzIGFyZSBmb3VuZCwgaXRcbiAgICAgKiBzY2hlZHVsZXMgdGhlIGNhbGxiYWNrIHRvIGJlIGludm9rZWQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBJbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX2NoZWNrRm9ySW50ZXJzZWN0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJvb3RJc0luRG9tID0gdGhpcy5fcm9vdElzSW5Eb20oKTtcbiAgICAgIHZhciByb290UmVjdCA9IHJvb3RJc0luRG9tID8gdGhpcy5fZ2V0Um9vdFJlY3QoKSA6IGdldEVtcHR5UmVjdCgpO1xuICAgIFxuICAgICAgdGhpcy5fb2JzZXJ2YXRpb25UYXJnZXRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gaXRlbS5lbGVtZW50O1xuICAgICAgICB2YXIgdGFyZ2V0UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdCh0YXJnZXQpO1xuICAgICAgICB2YXIgcm9vdENvbnRhaW5zVGFyZ2V0ID0gdGhpcy5fcm9vdENvbnRhaW5zVGFyZ2V0KHRhcmdldCk7XG4gICAgICAgIHZhciBvbGRFbnRyeSA9IGl0ZW0uZW50cnk7XG4gICAgICAgIHZhciBpbnRlcnNlY3Rpb25SZWN0ID0gcm9vdElzSW5Eb20gJiYgcm9vdENvbnRhaW5zVGFyZ2V0ICYmXG4gICAgICAgICAgICB0aGlzLl9jb21wdXRlVGFyZ2V0QW5kUm9vdEludGVyc2VjdGlvbih0YXJnZXQsIHRhcmdldFJlY3QsIHJvb3RSZWN0KTtcbiAgICBcbiAgICAgICAgdmFyIG5ld0VudHJ5ID0gaXRlbS5lbnRyeSA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5KHtcbiAgICAgICAgICB0aW1lOiBub3coKSxcbiAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgICBib3VuZGluZ0NsaWVudFJlY3Q6IHRhcmdldFJlY3QsXG4gICAgICAgICAgcm9vdEJvdW5kczogcm9vdFJlY3QsXG4gICAgICAgICAgaW50ZXJzZWN0aW9uUmVjdDogaW50ZXJzZWN0aW9uUmVjdFxuICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgaWYgKCFvbGRFbnRyeSkge1xuICAgICAgICAgIHRoaXMuX3F1ZXVlZEVudHJpZXMucHVzaChuZXdFbnRyeSk7XG4gICAgICAgIH0gZWxzZSBpZiAocm9vdElzSW5Eb20gJiYgcm9vdENvbnRhaW5zVGFyZ2V0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIG5ldyBlbnRyeSBpbnRlcnNlY3Rpb24gcmF0aW8gaGFzIGNyb3NzZWQgYW55IG9mIHRoZVxuICAgICAgICAgIC8vIHRocmVzaG9sZHMsIGFkZCBhIG5ldyBlbnRyeS5cbiAgICAgICAgICBpZiAodGhpcy5faGFzQ3Jvc3NlZFRocmVzaG9sZChvbGRFbnRyeSwgbmV3RW50cnkpKSB7XG4gICAgICAgICAgICB0aGlzLl9xdWV1ZWRFbnRyaWVzLnB1c2gobmV3RW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiB0aGUgcm9vdCBpcyBub3QgaW4gdGhlIERPTSBvciB0YXJnZXQgaXMgbm90IGNvbnRhaW5lZCB3aXRoaW5cbiAgICAgICAgICAvLyByb290IGJ1dCB0aGUgcHJldmlvdXMgZW50cnkgZm9yIHRoaXMgdGFyZ2V0IGhhZCBhbiBpbnRlcnNlY3Rpb24sXG4gICAgICAgICAgLy8gYWRkIGEgbmV3IHJlY29yZCBpbmRpY2F0aW5nIHJlbW92YWwuXG4gICAgICAgICAgaWYgKG9sZEVudHJ5ICYmIG9sZEVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9xdWV1ZWRFbnRyaWVzLnB1c2gobmV3RW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgdGhpcyk7XG4gICAgXG4gICAgICBpZiAodGhpcy5fcXVldWVkRW50cmllcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fY2FsbGJhY2sodGhpcy50YWtlUmVjb3JkcygpLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIFxuICAgIC8qKlxuICAgICAqIEFjY2VwdHMgYSB0YXJnZXQgYW5kIHJvb3QgcmVjdCBjb21wdXRlcyB0aGUgaW50ZXJzZWN0aW9uIGJldHdlZW4gdGhlblxuICAgICAqIGZvbGxvd2luZyB0aGUgYWxnb3JpdGhtIGluIHRoZSBzcGVjLlxuICAgICAqIFRPRE8ocGhpbGlwd2FsdG9uKTogYXQgdGhpcyB0aW1lIGNsaXAtcGF0aCBpcyBub3QgY29uc2lkZXJlZC5cbiAgICAgKiBodHRwczovL3czYy5naXRodWIuaW8vSW50ZXJzZWN0aW9uT2JzZXJ2ZXIvI2NhbGN1bGF0ZS1pbnRlcnNlY3Rpb24tcmVjdC1hbGdvXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgVGhlIHRhcmdldCBET00gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRSZWN0IFRoZSBib3VuZGluZyByZWN0IG9mIHRoZSB0YXJnZXQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJvb3RSZWN0IFRoZSBib3VuZGluZyByZWN0IG9mIHRoZSByb290IGFmdGVyIGJlaW5nXG4gICAgICogICAgIGV4cGFuZGVkIGJ5IHRoZSByb290TWFyZ2luIHZhbHVlLlxuICAgICAqIEByZXR1cm4gez9PYmplY3R9IFRoZSBmaW5hbCBpbnRlcnNlY3Rpb24gcmVjdCBvYmplY3Qgb3IgdW5kZWZpbmVkIGlmIG5vXG4gICAgICogICAgIGludGVyc2VjdGlvbiBpcyBmb3VuZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fY29tcHV0ZVRhcmdldEFuZFJvb3RJbnRlcnNlY3Rpb24gPVxuICAgICAgICBmdW5jdGlvbih0YXJnZXQsIHRhcmdldFJlY3QsIHJvb3RSZWN0KSB7XG4gICAgICAvLyBJZiB0aGUgZWxlbWVudCBpc24ndCBkaXNwbGF5ZWQsIGFuIGludGVyc2VjdGlvbiBjYW4ndCBoYXBwZW4uXG4gICAgICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUodGFyZ2V0KS5kaXNwbGF5ID09ICdub25lJykgcmV0dXJuO1xuICAgIFxuICAgICAgdmFyIGludGVyc2VjdGlvblJlY3QgPSB0YXJnZXRSZWN0O1xuICAgICAgdmFyIHBhcmVudCA9IGdldFBhcmVudE5vZGUodGFyZ2V0KTtcbiAgICAgIHZhciBhdFJvb3QgPSBmYWxzZTtcbiAgICBcbiAgICAgIHdoaWxlICghYXRSb290ICYmIHBhcmVudCkge1xuICAgICAgICB2YXIgcGFyZW50UmVjdCA9IG51bGw7XG4gICAgICAgIHZhciBwYXJlbnRDb21wdXRlZFN0eWxlID0gcGFyZW50Lm5vZGVUeXBlID09IDEgP1xuICAgICAgICAgICAgd2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50KSA6IHt9O1xuICAgIFxuICAgICAgICAvLyBJZiB0aGUgcGFyZW50IGlzbid0IGRpc3BsYXllZCwgYW4gaW50ZXJzZWN0aW9uIGNhbid0IGhhcHBlbi5cbiAgICAgICAgaWYgKHBhcmVudENvbXB1dGVkU3R5bGUuZGlzcGxheSA9PSAnbm9uZScpIHJldHVybiBudWxsO1xuICAgIFxuICAgICAgICBpZiAocGFyZW50ID09IHRoaXMucm9vdCB8fCBwYXJlbnQubm9kZVR5cGUgPT0gLyogRE9DVU1FTlQgKi8gOSkge1xuICAgICAgICAgIGF0Um9vdCA9IHRydWU7XG4gICAgICAgICAgaWYgKHBhcmVudCA9PSB0aGlzLnJvb3QgfHwgcGFyZW50ID09IGRvY3VtZW50KSB7XG4gICAgICAgICAgICBwYXJlbnRSZWN0ID0gcm9vdFJlY3Q7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZXJlJ3MgYSBmcmFtZSB0aGF0IGNhbiBiZSBuYXZpZ2F0ZWQgdG8uXG4gICAgICAgICAgICB2YXIgZnJhbWUgPSBnZXRQYXJlbnROb2RlKHBhcmVudCk7XG4gICAgICAgICAgICB2YXIgZnJhbWVSZWN0ID0gZnJhbWUgJiYgZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGZyYW1lKTtcbiAgICAgICAgICAgIHZhciBmcmFtZUludGVyc2VjdCA9XG4gICAgICAgICAgICAgICAgZnJhbWUgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9jb21wdXRlVGFyZ2V0QW5kUm9vdEludGVyc2VjdGlvbihmcmFtZSwgZnJhbWVSZWN0LCByb290UmVjdCk7XG4gICAgICAgICAgICBpZiAoZnJhbWVSZWN0ICYmIGZyYW1lSW50ZXJzZWN0KSB7XG4gICAgICAgICAgICAgIHBhcmVudCA9IGZyYW1lO1xuICAgICAgICAgICAgICBwYXJlbnRSZWN0ID0gY29udmVydEZyb21QYXJlbnRSZWN0KGZyYW1lUmVjdCwgZnJhbWVJbnRlcnNlY3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUmVjdCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIG5vbi12aXNpYmxlIG92ZXJmbG93LCBhbmQgaXQncyBub3QgdGhlIDxib2R5PlxuICAgICAgICAgIC8vIG9yIDxodG1sPiBlbGVtZW50LCB1cGRhdGUgdGhlIGludGVyc2VjdGlvbiByZWN0LlxuICAgICAgICAgIC8vIE5vdGU6IDxib2R5PiBhbmQgPGh0bWw+IGNhbm5vdCBiZSBjbGlwcGVkIHRvIGEgcmVjdCB0aGF0J3Mgbm90IGFsc29cbiAgICAgICAgICAvLyB0aGUgZG9jdW1lbnQgcmVjdCwgc28gbm8gbmVlZCB0byBjb21wdXRlIGEgbmV3IGludGVyc2VjdGlvbi5cbiAgICAgICAgICB2YXIgZG9jID0gcGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgICAgICAgaWYgKHBhcmVudCAhPSBkb2MuYm9keSAmJlxuICAgICAgICAgICAgICBwYXJlbnQgIT0gZG9jLmRvY3VtZW50RWxlbWVudCAmJlxuICAgICAgICAgICAgICBwYXJlbnRDb21wdXRlZFN0eWxlLm92ZXJmbG93ICE9ICd2aXNpYmxlJykge1xuICAgICAgICAgICAgcGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChwYXJlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBJZiBlaXRoZXIgb2YgdGhlIGFib3ZlIGNvbmRpdGlvbmFscyBzZXQgYSBuZXcgcGFyZW50UmVjdCxcbiAgICAgICAgLy8gY2FsY3VsYXRlIG5ldyBpbnRlcnNlY3Rpb24gZGF0YS5cbiAgICAgICAgaWYgKHBhcmVudFJlY3QpIHtcbiAgICAgICAgICBpbnRlcnNlY3Rpb25SZWN0ID0gY29tcHV0ZVJlY3RJbnRlcnNlY3Rpb24ocGFyZW50UmVjdCwgaW50ZXJzZWN0aW9uUmVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpbnRlcnNlY3Rpb25SZWN0KSBicmVhaztcbiAgICAgICAgcGFyZW50ID0gcGFyZW50ICYmIGdldFBhcmVudE5vZGUocGFyZW50KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbnRlcnNlY3Rpb25SZWN0O1xuICAgIH07XG4gICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcm9vdCByZWN0IGFmdGVyIGJlaW5nIGV4cGFuZGVkIGJ5IHRoZSByb290TWFyZ2luIHZhbHVlLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGV4cGFuZGVkIHJvb3QgcmVjdC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fZ2V0Um9vdFJlY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByb290UmVjdDtcbiAgICAgIGlmICh0aGlzLnJvb3QpIHtcbiAgICAgICAgcm9vdFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QodGhpcy5yb290KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFVzZSA8aHRtbD4vPGJvZHk+IGluc3RlYWQgb2Ygd2luZG93IHNpbmNlIHNjcm9sbCBiYXJzIGFmZmVjdCBzaXplLlxuICAgICAgICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgICByb290UmVjdCA9IHtcbiAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICByaWdodDogaHRtbC5jbGllbnRXaWR0aCB8fCBib2R5LmNsaWVudFdpZHRoLFxuICAgICAgICAgIHdpZHRoOiBodG1sLmNsaWVudFdpZHRoIHx8IGJvZHkuY2xpZW50V2lkdGgsXG4gICAgICAgICAgYm90dG9tOiBodG1sLmNsaWVudEhlaWdodCB8fCBib2R5LmNsaWVudEhlaWdodCxcbiAgICAgICAgICBoZWlnaHQ6IGh0bWwuY2xpZW50SGVpZ2h0IHx8IGJvZHkuY2xpZW50SGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fZXhwYW5kUmVjdEJ5Um9vdE1hcmdpbihyb290UmVjdCk7XG4gICAgfTtcbiAgICBcbiAgICBcbiAgICAvKipcbiAgICAgKiBBY2NlcHRzIGEgcmVjdCBhbmQgZXhwYW5kcyBpdCBieSB0aGUgcm9vdE1hcmdpbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjdCBUaGUgcmVjdCBvYmplY3QgdG8gZXhwYW5kLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGV4cGFuZGVkIHJlY3QuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBJbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX2V4cGFuZFJlY3RCeVJvb3RNYXJnaW4gPSBmdW5jdGlvbihyZWN0KSB7XG4gICAgICB2YXIgbWFyZ2lucyA9IHRoaXMuX3Jvb3RNYXJnaW5WYWx1ZXMubWFwKGZ1bmN0aW9uKG1hcmdpbiwgaSkge1xuICAgICAgICByZXR1cm4gbWFyZ2luLnVuaXQgPT0gJ3B4JyA/IG1hcmdpbi52YWx1ZSA6XG4gICAgICAgICAgICBtYXJnaW4udmFsdWUgKiAoaSAlIDIgPyByZWN0LndpZHRoIDogcmVjdC5oZWlnaHQpIC8gMTAwO1xuICAgICAgfSk7XG4gICAgICB2YXIgbmV3UmVjdCA9IHtcbiAgICAgICAgdG9wOiByZWN0LnRvcCAtIG1hcmdpbnNbMF0sXG4gICAgICAgIHJpZ2h0OiByZWN0LnJpZ2h0ICsgbWFyZ2luc1sxXSxcbiAgICAgICAgYm90dG9tOiByZWN0LmJvdHRvbSArIG1hcmdpbnNbMl0sXG4gICAgICAgIGxlZnQ6IHJlY3QubGVmdCAtIG1hcmdpbnNbM11cbiAgICAgIH07XG4gICAgICBuZXdSZWN0LndpZHRoID0gbmV3UmVjdC5yaWdodCAtIG5ld1JlY3QubGVmdDtcbiAgICAgIG5ld1JlY3QuaGVpZ2h0ID0gbmV3UmVjdC5ib3R0b20gLSBuZXdSZWN0LnRvcDtcbiAgICBcbiAgICAgIHJldHVybiBuZXdSZWN0O1xuICAgIH07XG4gICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogQWNjZXB0cyBhbiBvbGQgYW5kIG5ldyBlbnRyeSBhbmQgcmV0dXJucyB0cnVlIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGVcbiAgICAgKiB0aHJlc2hvbGQgdmFsdWVzIGhhcyBiZWVuIGNyb3NzZWQuXG4gICAgICogQHBhcmFtIHs/SW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeX0gb2xkRW50cnkgVGhlIHByZXZpb3VzIGVudHJ5IGZvciBhXG4gICAgICogICAgcGFydGljdWxhciB0YXJnZXQgZWxlbWVudCBvciBudWxsIGlmIG5vIHByZXZpb3VzIGVudHJ5IGV4aXN0cy5cbiAgICAgKiBAcGFyYW0ge0ludGVyc2VjdGlvbk9ic2VydmVyRW50cnl9IG5ld0VudHJ5IFRoZSBjdXJyZW50IGVudHJ5IGZvciBhXG4gICAgICogICAgcGFydGljdWxhciB0YXJnZXQgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgYSBhbnkgdGhyZXNob2xkIGhhcyBiZWVuIGNyb3NzZWQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBJbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX2hhc0Nyb3NzZWRUaHJlc2hvbGQgPVxuICAgICAgICBmdW5jdGlvbihvbGRFbnRyeSwgbmV3RW50cnkpIHtcbiAgICBcbiAgICAgIC8vIFRvIG1ha2UgY29tcGFyaW5nIGVhc2llciwgYW4gZW50cnkgdGhhdCBoYXMgYSByYXRpbyBvZiAwXG4gICAgICAvLyBidXQgZG9lcyBub3QgYWN0dWFsbHkgaW50ZXJzZWN0IGlzIGdpdmVuIGEgdmFsdWUgb2YgLTFcbiAgICAgIHZhciBvbGRSYXRpbyA9IG9sZEVudHJ5ICYmIG9sZEVudHJ5LmlzSW50ZXJzZWN0aW5nID9cbiAgICAgICAgICBvbGRFbnRyeS5pbnRlcnNlY3Rpb25SYXRpbyB8fCAwIDogLTE7XG4gICAgICB2YXIgbmV3UmF0aW8gPSBuZXdFbnRyeS5pc0ludGVyc2VjdGluZyA/XG4gICAgICAgICAgbmV3RW50cnkuaW50ZXJzZWN0aW9uUmF0aW8gfHwgMCA6IC0xO1xuICAgIFxuICAgICAgLy8gSWdub3JlIHVuY2hhbmdlZCByYXRpb3NcbiAgICAgIGlmIChvbGRSYXRpbyA9PT0gbmV3UmF0aW8pIHJldHVybjtcbiAgICBcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50aHJlc2hvbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0aHJlc2hvbGQgPSB0aGlzLnRocmVzaG9sZHNbaV07XG4gICAgXG4gICAgICAgIC8vIFJldHVybiB0cnVlIGlmIGFuIGVudHJ5IG1hdGNoZXMgYSB0aHJlc2hvbGQgb3IgaWYgdGhlIG5ldyByYXRpb1xuICAgICAgICAvLyBhbmQgdGhlIG9sZCByYXRpbyBhcmUgb24gdGhlIG9wcG9zaXRlIHNpZGVzIG9mIGEgdGhyZXNob2xkLlxuICAgICAgICBpZiAodGhyZXNob2xkID09IG9sZFJhdGlvIHx8IHRocmVzaG9sZCA9PSBuZXdSYXRpbyB8fFxuICAgICAgICAgICAgdGhyZXNob2xkIDwgb2xkUmF0aW8gIT09IHRocmVzaG9sZCA8IG5ld1JhdGlvKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHJvb3QgZWxlbWVudCBpcyBhbiBlbGVtZW50IGFuZCBpcyBpbiB0aGUgRE9NLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHJvb3QgZWxlbWVudCBpcyBhbiBlbGVtZW50IGFuZCBpcyBpbiB0aGUgRE9NLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl9yb290SXNJbkRvbSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICF0aGlzLnJvb3QgfHwgY29udGFpbnNEZWVwKGRvY3VtZW50LCB0aGlzLnJvb3QpO1xuICAgIH07XG4gICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdGFyZ2V0IGVsZW1lbnQgaXMgYSBjaGlsZCBvZiByb290LlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IFRoZSB0YXJnZXQgZWxlbWVudCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSB0YXJnZXQgZWxlbWVudCBpcyBhIGNoaWxkIG9mIHJvb3QuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBJbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX3Jvb3RDb250YWluc1RhcmdldCA9IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgcmV0dXJuIGNvbnRhaW5zRGVlcCh0aGlzLnJvb3QgfHwgZG9jdW1lbnQsIHRhcmdldCkgJiZcbiAgICAgICAgKCF0aGlzLnJvb3QgfHwgdGhpcy5yb290Lm93bmVyRG9jdW1lbnQgPT0gdGFyZ2V0Lm93bmVyRG9jdW1lbnQpO1xuICAgIH07XG4gICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgaW5zdGFuY2UgdG8gdGhlIGdsb2JhbCBJbnRlcnNlY3Rpb25PYnNlcnZlciByZWdpc3RyeSBpZiBpdCBpc24ndFxuICAgICAqIGFscmVhZHkgcHJlc2VudC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fcmVnaXN0ZXJJbnN0YW5jZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHJlZ2lzdHJ5LmluZGV4T2YodGhpcykgPCAwKSB7XG4gICAgICAgIHJlZ2lzdHJ5LnB1c2godGhpcyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBcbiAgICBcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBpbnN0YW5jZSBmcm9tIHRoZSBnbG9iYWwgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgcmVnaXN0cnkuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBJbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX3VucmVnaXN0ZXJJbnN0YW5jZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGluZGV4ID0gcmVnaXN0cnkuaW5kZXhPZih0aGlzKTtcbiAgICAgIGlmIChpbmRleCAhPSAtMSkgcmVnaXN0cnkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICAgIFxuICAgIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgcGVyZm9ybWFuY2Uubm93KCkgbWV0aG9kIG9yIG51bGwgaW4gYnJvd3NlcnNcbiAgICAgKiB0aGF0IGRvbid0IHN1cHBvcnQgdGhlIEFQSS5cbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBlbGFwc2VkIHRpbWUgc2luY2UgdGhlIHBhZ2Ugd2FzIHJlcXVlc3RlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub3coKSB7XG4gICAgICByZXR1cm4gd2luZG93LnBlcmZvcm1hbmNlICYmIHBlcmZvcm1hbmNlLm5vdyAmJiBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB9XG4gICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogVGhyb3R0bGVzIGEgZnVuY3Rpb24gYW5kIGRlbGF5cyBpdHMgZXhlY3V0aW9uLCBzbyBpdCdzIG9ubHkgY2FsbGVkIGF0IG1vc3RcbiAgICAgKiBvbmNlIHdpdGhpbiBhIGdpdmVuIHRpbWUgcGVyaW9kLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZW91dCBUaGUgYW1vdW50IG9mIHRpbWUgdGhhdCBtdXN0IHBhc3MgYmVmb3JlIHRoZVxuICAgICAqICAgICBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIGFnYWluLlxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZuLCB0aW1lb3V0KSB7XG4gICAgICB2YXIgdGltZXIgPSBudWxsO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aW1lcikge1xuICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZuKCk7XG4gICAgICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8qKlxuICAgICAqIEFkZHMgYW4gZXZlbnQgaGFuZGxlciB0byBhIERPTSBub2RlIGVuc3VyaW5nIGNyb3NzLWJyb3dzZXIgY29tcGF0aWJpbGl0eS5cbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIERPTSBub2RlIHRvIGFkZCB0aGUgZXZlbnQgaGFuZGxlciB0by5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGV2ZW50IGhhbmRsZXIgdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X3VzZUNhcHR1cmUgT3B0aW9uYWxseSBhZGRzIHRoZSBldmVuIHRvIHRoZSBjYXB0dXJlXG4gICAgICogICAgIHBoYXNlLiBOb3RlOiB0aGlzIG9ubHkgd29ya3MgaW4gbW9kZXJuIGJyb3dzZXJzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZEV2ZW50KG5vZGUsIGV2ZW50LCBmbiwgb3B0X3VzZUNhcHR1cmUpIHtcbiAgICAgIGlmICh0eXBlb2Ygbm9kZS5hZGRFdmVudExpc3RlbmVyID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBmbiwgb3B0X3VzZUNhcHR1cmUgfHwgZmFsc2UpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodHlwZW9mIG5vZGUuYXR0YWNoRXZlbnQgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgZm4pO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgcHJldmlvdXNseSBhZGRlZCBldmVudCBoYW5kbGVyIGZyb20gYSBET00gbm9kZS5cbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIERPTSBub2RlIHRvIHJlbW92ZSB0aGUgZXZlbnQgaGFuZGxlciBmcm9tLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZXZlbnQgaGFuZGxlciB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBvcHRfdXNlQ2FwdHVyZSBJZiB0aGUgZXZlbnQgaGFuZGxlciB3YXMgYWRkZWQgd2l0aCB0aGlzXG4gICAgICogICAgIGZsYWcgc2V0IHRvIHRydWUsIGl0IHNob3VsZCBiZSBzZXQgdG8gdHJ1ZSBoZXJlIGluIG9yZGVyIHRvIHJlbW92ZSBpdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVFdmVudChub2RlLCBldmVudCwgZm4sIG9wdF91c2VDYXB0dXJlKSB7XG4gICAgICBpZiAodHlwZW9mIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgZm4sIG9wdF91c2VDYXB0dXJlIHx8IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBub2RlLmRldGF0Y2hFdmVudCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG5vZGUuZGV0YXRjaEV2ZW50KCdvbicgKyBldmVudCwgZm4pO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBpbnRlcnNlY3Rpb24gYmV0d2VlbiB0d28gcmVjdCBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWN0MSBUaGUgZmlyc3QgcmVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVjdDIgVGhlIHNlY29uZCByZWN0LlxuICAgICAqIEByZXR1cm4gez9PYmplY3R9IFRoZSBpbnRlcnNlY3Rpb24gcmVjdCBvciB1bmRlZmluZWQgaWYgbm8gaW50ZXJzZWN0aW9uXG4gICAgICogICAgIGlzIGZvdW5kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXB1dGVSZWN0SW50ZXJzZWN0aW9uKHJlY3QxLCByZWN0Mikge1xuICAgICAgdmFyIHRvcCA9IE1hdGgubWF4KHJlY3QxLnRvcCwgcmVjdDIudG9wKTtcbiAgICAgIHZhciBib3R0b20gPSBNYXRoLm1pbihyZWN0MS5ib3R0b20sIHJlY3QyLmJvdHRvbSk7XG4gICAgICB2YXIgbGVmdCA9IE1hdGgubWF4KHJlY3QxLmxlZnQsIHJlY3QyLmxlZnQpO1xuICAgICAgdmFyIHJpZ2h0ID0gTWF0aC5taW4ocmVjdDEucmlnaHQsIHJlY3QyLnJpZ2h0KTtcbiAgICAgIHZhciB3aWR0aCA9IHJpZ2h0IC0gbGVmdDtcbiAgICAgIHZhciBoZWlnaHQgPSBib3R0b20gLSB0b3A7XG4gICAgXG4gICAgICByZXR1cm4gKHdpZHRoID49IDAgJiYgaGVpZ2h0ID49IDApICYmIHtcbiAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgIGJvdHRvbTogYm90dG9tLFxuICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICByaWdodDogcmlnaHQsXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgIH0gfHwgbnVsbDtcbiAgICB9XG4gICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogU2hpbXMgdGhlIG5hdGl2ZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBvbGRlciBJRS5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsIFRoZSBlbGVtZW50IHdob3NlIGJvdW5kaW5nIHJlY3QgdG8gZ2V0LlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIChwb3NzaWJseSBzaGltbWVkKSByZWN0IG9mIHRoZSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbCkge1xuICAgICAgdmFyIHJlY3Q7XG4gICAgXG4gICAgICB0cnkge1xuICAgICAgICByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gSWdub3JlIFdpbmRvd3MgNyBJRTExIFwiVW5zcGVjaWZpZWQgZXJyb3JcIlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdzNjL0ludGVyc2VjdGlvbk9ic2VydmVyL3B1bGwvMjA1XG4gICAgICB9XG4gICAgXG4gICAgICBpZiAoIXJlY3QpIHJldHVybiBnZXRFbXB0eVJlY3QoKTtcbiAgICBcbiAgICAgIC8vIE9sZGVyIElFXG4gICAgICBpZiAoIShyZWN0LndpZHRoICYmIHJlY3QuaGVpZ2h0KSkge1xuICAgICAgICByZWN0ID0ge1xuICAgICAgICAgIHRvcDogcmVjdC50b3AsXG4gICAgICAgICAgcmlnaHQ6IHJlY3QucmlnaHQsXG4gICAgICAgICAgYm90dG9tOiByZWN0LmJvdHRvbSxcbiAgICAgICAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgICAgICAgd2lkdGg6IHJlY3QucmlnaHQgLSByZWN0LmxlZnQsXG4gICAgICAgICAgaGVpZ2h0OiByZWN0LmJvdHRvbSAtIHJlY3QudG9wXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVjdDtcbiAgICB9XG4gICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBlbXB0eSByZWN0IG9iamVjdC4gQW4gZW1wdHkgcmVjdCBpcyByZXR1cm5lZCB3aGVuIGFuIGVsZW1lbnRcbiAgICAgKiBpcyBub3QgaW4gdGhlIERPTS5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBlbXB0eSByZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEVtcHR5UmVjdCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGhlaWdodDogMFxuICAgICAgfTtcbiAgICB9XG4gICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogSW52ZXJ0cyB0aGUgaW50ZXJzZWN0aW9uIGFuZCBib3VuZGluZyByZWN0IGZyb20gdGhlIHBhcmVudCAoZnJhbWUpIEJDUiB0b1xuICAgICAqIHRoZSBsb2NhbCBCQ1Igc3BhY2UuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmVudEJvdW5kaW5nUmVjdCBUaGUgcGFyZW50J3MgYm91bmQgY2xpZW50IHJlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmVudEludGVyc2VjdGlvblJlY3QgVGhlIHBhcmVudCdzIG93biBpbnRlcnNlY3Rpb24gcmVjdC5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBsb2NhbCByb290IGJvdW5kaW5nIHJlY3QgZm9yIHRoZSBwYXJlbnQncyBjaGlsZHJlbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb252ZXJ0RnJvbVBhcmVudFJlY3QocGFyZW50Qm91bmRpbmdSZWN0LCBwYXJlbnRJbnRlcnNlY3Rpb25SZWN0KSB7XG4gICAgICB2YXIgdG9wID0gcGFyZW50SW50ZXJzZWN0aW9uUmVjdC50b3AgLSBwYXJlbnRCb3VuZGluZ1JlY3QudG9wO1xuICAgICAgdmFyIGxlZnQgPSBwYXJlbnRJbnRlcnNlY3Rpb25SZWN0LmxlZnQgLSBwYXJlbnRCb3VuZGluZ1JlY3QubGVmdDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogdG9wLFxuICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICBoZWlnaHQ6IHBhcmVudEludGVyc2VjdGlvblJlY3QuaGVpZ2h0LFxuICAgICAgICB3aWR0aDogcGFyZW50SW50ZXJzZWN0aW9uUmVjdC53aWR0aCxcbiAgICAgICAgYm90dG9tOiB0b3AgKyBwYXJlbnRJbnRlcnNlY3Rpb25SZWN0LmhlaWdodCxcbiAgICAgICAgcmlnaHQ6IGxlZnQgKyBwYXJlbnRJbnRlcnNlY3Rpb25SZWN0LndpZHRoXG4gICAgICB9O1xuICAgIH1cbiAgICBcbiAgICBcbiAgICAvKipcbiAgICAgKiBDaGVja3MgdG8gc2VlIGlmIGEgcGFyZW50IGVsZW1lbnQgY29udGFpbnMgYSBjaGlsZCBlbGVtZW50IChpbmNsdWRpbmcgaW5zaWRlXG4gICAgICogc2hhZG93IERPTSkuXG4gICAgICogQHBhcmFtIHtOb2RlfSBwYXJlbnQgVGhlIHBhcmVudCBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gY2hpbGQgVGhlIGNoaWxkIGVsZW1lbnQuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGFyZW50IG5vZGUgY29udGFpbnMgdGhlIGNoaWxkIG5vZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29udGFpbnNEZWVwKHBhcmVudCwgY2hpbGQpIHtcbiAgICAgIHZhciBub2RlID0gY2hpbGQ7XG4gICAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICBpZiAobm9kZSA9PSBwYXJlbnQpIHJldHVybiB0cnVlO1xuICAgIFxuICAgICAgICBub2RlID0gZ2V0UGFyZW50Tm9kZShub2RlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcGFyZW50IG5vZGUgb2YgYW4gZWxlbWVudCBvciBpdHMgaG9zdCBlbGVtZW50IGlmIHRoZSBwYXJlbnQgbm9kZVxuICAgICAqIGlzIGEgc2hhZG93IHJvb3QuXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBub2RlIHdob3NlIHBhcmVudCB0byBnZXQuXG4gICAgICogQHJldHVybiB7Tm9kZXxudWxsfSBUaGUgcGFyZW50IG5vZGUgb3IgbnVsbCBpZiBubyBwYXJlbnQgZXhpc3RzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFBhcmVudE5vZGUobm9kZSkge1xuICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICBcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IC8qIERPQ1VNRU5UICovIDkgJiYgbm9kZSAhPSBkb2N1bWVudCkge1xuICAgICAgICAvLyBJZiB0aGlzIG5vZGUgaXMgYSBkb2N1bWVudCBub2RlLCBsb29rIGZvciB0aGUgZW1iZWRkaW5nIGZyYW1lLlxuICAgICAgICByZXR1cm4gZ2V0RnJhbWVFbGVtZW50KG5vZGUpO1xuICAgICAgfVxuICAgIFxuICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgPT0gMTEgJiYgcGFyZW50Lmhvc3QpIHtcbiAgICAgICAgLy8gSWYgdGhlIHBhcmVudCBpcyBhIHNoYWRvdyByb290LCByZXR1cm4gdGhlIGhvc3QgZWxlbWVudC5cbiAgICAgICAgcmV0dXJuIHBhcmVudC5ob3N0O1xuICAgICAgfVxuICAgIFxuICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuYXNzaWduZWRTbG90KSB7XG4gICAgICAgIC8vIElmIHRoZSBwYXJlbnQgaXMgZGlzdHJpYnV0ZWQgaW4gYSA8c2xvdD4sIHJldHVybiB0aGUgcGFyZW50IG9mIGEgc2xvdC5cbiAgICAgICAgcmV0dXJuIHBhcmVudC5hc3NpZ25lZFNsb3QucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICBcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGVtYmVkZGluZyBmcmFtZSBlbGVtZW50LCBpZiBhbnkuXG4gICAgICogQHBhcmFtIHshRG9jdW1lbnR9IGRvY1xuICAgICAqIEByZXR1cm4geyFFbGVtZW50fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEZyYW1lRWxlbWVudChkb2MpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkb2MuZGVmYXVsdFZpZXcgJiYgZG9jLmRlZmF1bHRWaWV3LmZyYW1lRWxlbWVudCB8fCBudWxsO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGVycm9yLlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgXG4gICAgLy8gRXhwb3NlcyB0aGUgY29uc3RydWN0b3JzIGdsb2JhbGx5LlxuICAgIHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlciA9IEludGVyc2VjdGlvbk9ic2VydmVyO1xuICAgIHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5ID0gSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeTtcbiAgICBcbiAgICB9KCkpOyJdfQ==